openapi: 3.0.3
info:
  title: API Gateway
  version: 1.0.0
  description: API specification for the API Gateway

servers:
  - url: localhost:8080
    description: local dev

paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Authservice health response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /auth/register:
    post:
      summary: Register a new user
      operationId: register
      tags:
        - Authentication
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Authenticate a user and obtain an access token
      operationId: login
      tags:
        - Authentication
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request - Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/credentials:
    put:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      security:
        - bearerAuth: []
      summary: Update user credentials
      operationId: updateCredentials
      tags:
        - Credentials
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateCredentialsRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCredentialsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/credentials/{id}:
    put:
      security:
        - bearerAuth: []
      summary: ADMIN ONLY - Update user credentials
      operationId: adminUpdateCredentials
      tags:
        - Credentials
      parameters:
        - $ref: '#/components/parameters/AuthUserIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateCredentialsRequest'
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    parameters:
      - $ref: '#/components/parameters/AuthorizationHeader'
    get:
      security:
        - bearerAuth: []
      summary: ADMIN ONLY - List all users with optional search and pagination
      operationId: listUsers
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/UserSearchQueryParam'
        - $ref: '#/components/parameters/UserCreatedAfterQueryParam'
        - $ref: '#/components/parameters/UserCreatedBeforeQueryParam'
        - $ref: '#/components/parameters/UserSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get a user's profile
      operationId: getUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      security:
        - bearerAuth: []
      summary: Update a user's profile
      operationId: updateUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: Updated user profile data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to update this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      security:
        - bearerAuth: []
      summary: Delete a user
      operationId: deleteUser
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to delete this user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      security:
        - bearerAuth: []
      summary: List all products with optional search and pagination
      operationId: listProducts
      tags:
        - Product Management
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/ProductSearchQueryParam'
        - $ref: '#/components/parameters/ProductCategoryQueryParam'
        - $ref: '#/components/parameters/ProductPriceMinQueryParam'
        - $ref: '#/components/parameters/ProductPriceMaxQueryParam'
        - $ref: '#/components/parameters/ProductCreatedAfterQueryParam'
        - $ref: '#/components/parameters/ProductCreatedBeforeQueryParam'
        - $ref: '#/components/parameters/ProductSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: ADMIN ONLY - Create a new product
      operationId: createProduct
      tags:
        - Product Management
      security:
        - bearerAuth: []
      requestBody:
        description: Product data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get a product by ID
      operationId: getProductById
      tags:
        - Product Management
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: ADMIN ONLY - Update a product
      operationId: updateProduct
      tags:
        - Product Management
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: Updated product data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: ADMIN ONLY - Delete a product
      operationId: deleteProduct
      tags:
        - Product Management
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProductResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories/{id}:
    get:
      security:
        - bearerAuth: []
      summary: Get a category by ID
      operationId: getCategoryById
      tags:
        - Category Management
      parameters:
        - name: id
          in: path
          description: UUID of the category
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Category does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories:
    get:
      security:
        - bearerAuth: []
      summary: List all categories with optional search and pagination
      operationId: listCategories
      tags:
        - Category Management
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/ProductSearchQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryListResponse'
        '400':
          description: Bad Request - Invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart-products:
    get:
      summary: Get all products in the user's shopping cart
      operationId: getCartProducts
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Cart products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: Add an product to the shopping cart
      operationId: addProductToCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Product ID and quantity to add to the cart
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartProductRequest'
      responses:
        '201':
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: Empty the shopping cart
      operationId: emptyCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Shopping cart emptied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyCartResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart-products/{productId}:
    put:
      summary: Update the quantity of an product in the cart
      operationId: updateCartProduct
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: New quantity for the cart product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartProductRequest'
      responses:
        '200':
          description: Cart product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist in the cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove a product from the shopping cart
      operationId: deleteCartProduct
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Cart product removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCartProductResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist in the cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart-products/checkout:
    post:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: Initiate the checkout process for the shopping cart
      operationId: checkoutCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Start checkout process
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartCheckoutRequest'
      responses:
        '200':
          description: Checkout initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '400':
          description: Bad Request - Cart is empty or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    get:
      summary: ADMIN ONLY - Get a list of all orders (admin only)
      operationId: getAllOrders
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/OrderStatusQueryParam'
        - $ref: '#/components/parameters/OrderSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}:
    get:
      summary: ADMIN ONLY - Get details of a specific order
      operationId: getOrderById
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OrderIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Order does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/orders:
    get:
      summary: Get all orders for a specific user
      operationId: getUserOrders
      tags:
        - Orders
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/OrderUserIdPathParam'
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/OrderStatusQueryParam'
        - $ref: '#/components/parameters/OrderSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: User's orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access these orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment-methods:
    get:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: Get a list of available payment methods
      operationId: getPaymentMethods
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Payment methods retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: ADMIN ONLY -  Create a new payment method
      operationId: createPaymentMethod
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      requestBody:
        description: Payment method data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePaymentMethodRequest'
      responses:
        '201':
          description: Payment method created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /payment-methods/{id}:
    get:
      summary: ADMIN ONLY - Get details of a payment method
      operationId: getPaymentMethodById
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaymentMethodIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Payment method retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodDetailedResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Payment method does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: ADMIN ONLY - Update a payment method
      operationId: updatePaymentMethod
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaymentMethodIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: Updated payment method data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePaymentMethodRequest'
      responses:
        '200':
          description: Payment method updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethodDetailedResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Payment method does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: ADMIN ONLY - Delete a payment method
      operationId: deletePaymentMethod
      tags:
        - Payment Methods
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PaymentMethodIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Payment method deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePaymentMethodResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Payment method does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /license-templates:
    get:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: ADMIN ONLY - List all license templates
      operationId: listLicenseTemplates
      tags:
        - License Templates
      security:
        - bearerAuth: []
      responses:
        '200':
          description: License templates retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      parameters:
        - $ref: '#/components/parameters/AuthorizationHeader'
      summary: ADMIN ONLY - Create a new license template
      operationId: createLicenseTemplate
      tags:
        - License Templates
      security:
        - bearerAuth: []
      requestBody:
        description: License template data to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLicenseTemplateRequest'
      responses:
        '201':
          description: License template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /license-templates/{productId}:
    get:
      summary: ADMIN ONLY - Get license template by product ID
      operationId: getLicenseTemplateByProductId
      tags:
        - License Templates
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LicenseProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: License template retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - License template does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: ADMIN ONLY - Create or update license template for a product
      operationId: updateLicenseTemplate
      tags:
        - License Templates
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LicenseProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      requestBody:
        description: License template data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLicenseTemplateRequest'
      responses:
        '200':
          description: License template updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateResponse'
        '201':
          description: License template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseTemplateResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    delete:
      summary: ADMIN ONLY - Delete a license template
      operationId: deleteLicenseTemplate
      tags:
        - License Templates
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LicenseProductIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: License template deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLicenseTemplateResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - License template does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /licenses:
    get:
      summary: ADMIN ONLY - List all generated licenses
      operationId: listLicenses
      tags:
        - Licenses
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/LicenseUserIdQueryParam'
        - $ref: '#/components/parameters/LicenseProductIdQueryParam'
        - $ref: '#/components/parameters/LicenseSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Licenses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /licenses/{serialNumber}:
    get:
      summary: Get license by serial number
      operationId: getLicenseBySerialNumber
      tags:
        - Licenses
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/SerialNumberPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: License retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - License does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications:
    get:
      summary: ADMIN ONLY - List sent notifications
      operationId: listNotifications
      tags:
        - Notifications
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/EmailQueryParam'
        - $ref: '#/components/parameters/NotificationUserIdQueryParam'
        - $ref: '#/components/parameters/NotificationTypeQueryParam'
        - $ref: '#/components/parameters/NotificationSentAfterQueryParam'
        - $ref: '#/components/parameters/NotificationSentBeforeQueryParam'
        - $ref: '#/components/parameters/NotificationSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /notifications/{notificationId}:
    get:
      summary: ADMIN ONLY - Get details of a specific notification
      operationId: getNotificationById
      tags:
        - Notifications
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/NotificationIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Notification retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Notification does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events:
    get:
      summary: ADMIN ONLY - List recorded events
      operationId: listEvents
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/EventTypeQueryParam'
        - $ref: '#/components/parameters/EventSourceServiceQueryParam'
        - $ref: '#/components/parameters/EventUserIdQueryParam'
        - $ref: '#/components/parameters/EventUserEmailQueryParam'
        - $ref: '#/components/parameters/EventSessionIdQueryParam'
        - $ref: '#/components/parameters/EventProductIdQueryParam'
        - $ref: '#/components/parameters/EventOrderIdQueryParam'
        - $ref: '#/components/parameters/EventOccurredAfterQueryParam'
        - $ref: '#/components/parameters/EventOccurredBeforeQueryParam'
        - $ref: '#/components/parameters/EventRequestCorrelationIdQueryParam'
        - $ref: '#/components/parameters/EventSortQueryParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}:
    get:
      summary: ADMIN ONLY - Get details of a specific event
      operationId: getEventById
      tags:
        - Events
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIdPathParam'
        - $ref: '#/components/parameters/AuthorizationHeader'
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Event does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    AuthorizationHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
    AuthUserIdPathParam:
      name: id
      in: path
      description: UUID of the user
      required: true
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000

    UserIdPathParam:
      name: id
      in: path
      description: UUID of the user
      required: true
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000

    PageQueryParam:
      name: page
      in: query
      description: Page number for pagination (default is 1)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitQueryParam:
      name: limit
      in: query
      description: Number of items per page (default is 10)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    UserSearchQueryParam:
      name: search
      in: query
      description: Search term to filter users by name or email
      required: false
      schema:
        type: string
        example: "john.doe@example.com"

    UserCreatedAfterQueryParam:
      name: createdAfter
      in: query
      description: Filter users created after a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-01-01T00:00:00Z'

    UserCreatedBeforeQueryParam:
      name: createdBefore
      in: query
      description: Filter users created before a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-12-31T23:59:59Z'

    UserSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'nameAsc', 'nameDesc', 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - nameAsc
          - nameDesc
          - dateAsc
          - dateDesc
        example: 'nameAsc'

    ProductIdPathParam:
      name: id
      in: path
      description: UUID of the product
      required: true
      schema:
        type: string
        format: uuid
        example: 321e4567-e89b-12d3-a456-426614174000

    ProductSearchQueryParam:
      name: search
      in: query
      description: Search term to filter products by title or description
      required: false
      schema:
        type: string
        example: "photo editor"

    ProductCategoryQueryParam:
      name: category
      in: query
      description: Filter products by category
      required: false
      schema:
        type: string
        example: "Software"

    ProductPriceMinQueryParam:
      name: priceMin
      in: query
      description: Minimum price to filter products
      required: false
      schema:
        type: number
        format: float
        example: 10.00

    ProductPriceMaxQueryParam:
      name: priceMax
      in: query
      description: Maximum price to filter products
      required: false
      schema:
        type: number
        format: float
        example: 100.00

    ProductCreatedAfterQueryParam:
      name: createdAfter
      in: query
      description: Filter products created after a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-01-01T00:00:00Z'

    ProductCreatedBeforeQueryParam:
      name: createdBefore
      in: query
      description: Filter products created before a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-12-31T23:59:59Z'

    ProductSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'priceAsc', 'priceDesc', 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - priceAsc
          - priceDesc
          - dateAsc
          - dateDesc
          - titleAsc
          - titleDesc
        example: 'priceAsc'

    CartProductIdPathParam:
      name: productId
      in: path
      description: ID of the cart product
      required: true
      schema:
        type: string
        format: uuid
        example: 789e1234-e89b-12d3-a456-426614174001

    OrderIdPathParam:
      name: orderId
      in: path
      description: UUID of the order
      required: true
      schema:
        type: string
        format: uuid
        example: 789e4567-e89b-12d3-a456-426614174000

    OrderUserIdPathParam:
      name: userId
      in: path
      description: UUID of the user
      required: true
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    OrderStatusQueryParam:
      name: status
      in: query
      description: Filter orders by status
      required: false
      schema:
        type: string
        enum:
          - OPEN
          - PAYMENT_COMPLETED
          - PAYMENT_FAILED
          - LICENSES_GENERATED
          - COMPLETED
        example: "Completed"

    OrderSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'date_asc', 'date_desc')
      required: false
      schema:
        type: string
        enum:
          - date_asc
          - date_desc
        example: 'date_desc'

    PaymentMethodIdPathParam:
      name: id
      in: path
      description: UUID of the payment method
      required: true
      schema:
        type: string
        format: uuid
        example: 987e6543-e89b-12d3-a456-426614174004

    LicenseProductIdPathParam:
      name: productId
      in: path
      description: UUID of the product
      required: true
      schema:
        type: string
        format: uuid
        example: 321e4567-e89b-12d3-a456-426614174000

    SerialNumberPathParam:
      name: serialNumber
      in: path
      description: Serial number of the license
      required: true
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174003

    LicenseUserIdQueryParam:
      name: userId
      in: query
      description: Filter licenses by user ID
      required: false
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    LicenseProductIdQueryParam:
      name: productId
      in: query
      description: Filter licenses by product ID
      required: false
      schema:
        type: string
        format: uuid
        example: 321e4567-e89b-12d3-a456-426614174000

    LicenseSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - dateAsc
          - dateDesc
        example: 'dateDesc'

    NotificationIdPathParam:
      name: notificationId
      in: path
      description: UUID of the notification
      required: true
      schema:
        type: string
        format: uuid
        example: 789e1234-e89b-12d3-a456-426614174001

    EmailQueryParam:
      name: email
      in: query
      description: Filter notifications by recipient email
      required: false
      schema:
        type: string
        format: email
        example: user@example.com

    NotificationUserIdQueryParam:
      name: userId
      in: query
      description: Filter notifications by user ID
      required: false
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    NotificationTypeQueryParam:
      name: type
      in: query
      description: Filter notifications by type
      required: false
      schema:
        type: string

    NotificationSentAfterQueryParam:
      name: sentAfter
      in: query
      description: Filter notifications sent after a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-01-01T00:00:00Z'

    NotificationSentBeforeQueryParam:
      name: sentBefore
      in: query
      description: Filter notifications sent before a specific date
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-12-31T23:59:59Z'

    NotificationSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - dateAsc
          - dateDesc
        example: 'dateDesc'

    EventIdPathParam:
      name: eventId
      in: path
      description: UUID of the event
      required: true
      schema:
        type: string
        format: uuid
        example: 789e1234-e89b-12d3-a456-426614174001

    EventTypeQueryParam:
      name: eventType
      in: query
      description: Filter events by event type
      required: false
      schema:
        type: string
        example: 'OrderCreated'

    EventSourceServiceQueryParam:
      name: sourceService
      in: query
      description: Filter events by source service name
      required: false
      schema:
        type: string
        example: 'OrderService'

    EventUserIdQueryParam:
      name: userId
      in: query
      description: Filter events by user ID
      required: false
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    EventProductIdQueryParam:
      name: productId
      in: query
      description: Filter events by product ID
      required: false
      schema:
        type: string
        format: uuid
        example: 321e4567-e89b-12d3-a456-426614174000

    EventOrderIdQueryParam:
      name: orderId
      in: query
      description: Filter events by order ID
      required: false
      schema:
        type: string
        format: uuid
        example: 789e4567-e89b-12d3-a456-426614174000

    EventSessionIdQueryParam:
      name: sessionId
      in: query
      description: Filter events by session ID
      required: false
      schema:
        type: string
        format: uuid
        example: 789e4567-e89b-12d3-a456-426614174000

    EventUserEmailQueryParam:
      name: userEmail
      in: query
      description: Filter events by user email
      required: false
      schema:
        type: string

    EventOccurredAfterQueryParam:
      name: occurredAfter
      in: query
      description: Filter events that occurred after a specific date and time
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-10-01T00:00:00Z'

    EventOccurredBeforeQueryParam:
      name: occurredBefore
      in: query
      description: Filter events that occurred before a specific date and time
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-10-31T23:59:59Z'

    EventRequestCorrelationIdQueryParam:
      name: requestCorrelationId
      in: query
      description: Filter events by request correlation ID
      required: false
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    EventSortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - dateAsc
          - dateDesc
        example: 'dateDesc'

  schemas:
    RegisterRequest:
      type: object
      properties:
        userData:
          $ref: '#/components/schemas/UserForm'
        credentials:
          $ref: '#/components/schemas/CredentialsForm'

    UserForm:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type : string
        address:
          $ref: '#/components/schemas/AddressForm'

    AddressForm:
      type: object
      properties:
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'Anytown'
        state:
          type: string
          example: 'State'
        postalCode:
          type: string
          example: '12345'
        country:
          type: string
          example: 'Country'

    CredentialsForm:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password

    AdminUpdateCredentialsRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    UserUpdateCredentialsRequest:
      type: object
      properties:
        email:
          type: string
        oldPassword:
          type: string
        newPassword:
          type: string

    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully.
        token:
          type: string
          example: "bearer ey...."

    LoginRequest:
      type: object
      properties:
        credentials:
          $ref: '#/components/schemas/CredentialsForm'

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        message:
          type: string
          description: Successful login response message
          example: "Login successful"

    UpdateCredentialsResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        message:
          type: string
          description: Successful update of user credentials
          example: "Credentials updated successfuly"

    UserProfileResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
        email:
          type: string
          example: user@example.com
        phoneNumber:
          type: string
          example: '+1234567890'
        address:
          $ref: '#/components/schemas/Address'
        created_at:
          type: string
          format: date-time
          example: '2023-10-15T10:00:00Z'
        updated_at:
          type: string
          format: date-time
          example: '2023-10-16T12:00:00Z'

    UpdateUserProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          example: customer
        phoneNumber:
          type: string
          example: '+1234567890'
        address:
          $ref: '#/components/schemas/Address'

    Address:
      type: object
      properties:
        street:
          type: string
          example: '123 Main St'
        city:
          type: string
          example: 'Anytown'
        state:
          type: string
          example: 'State'
        postalCode:
          type: string
          example: '12345'
        country:
          type: string
          example: 'Country'

    DeleteUserResponse:
      type: object
      properties:
        message:
          type: string
          example: User deleted successfully.

    UserListResponse:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserProfileResponse'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 321e4567-e89b-12d3-a456-426614174000
        title:
          type: string
          example: "Photo Editor Pro"
        description:
          type: string
          example: "A professional photo editing software."
        category:
          type: string
          example: "Software"
        price:
          type: number
          format: float
          example: 49.99
        currency:
          type: string
          example: "EUR"
          enum:
            - "EUR"
        imageUrl:
          type: string
          example: https://exampleurl.com/example-product.jpg
        licenseAvailable:
          type: boolean
          example: true
        tags:
          type: array
          items:
            type: string
        deleted:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2023-10-15T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-10-16T12:00:00Z'
      required:
        - id
        - title
        - description
        - category
        - price
        - currency
        - createdAt
        - updatedAt

    CreateProductRequest:
      type: object
      required:
        - title
        - description
        - category
        - price
      properties:
        title:
          type: string
          example: "Photo Editor Pro"
        description:
          type: string
          example: "A professional photo editing software."
        category:
          type: string
          example: "Software"
        price:
          type: number
          format: float
          example: 49.99
        imageUrl:
          type: string
          example: https://exampleurl.com/example-product.jpg
        tags:
          type: array
          items:
            type: string

    UpdateProductRequest:
      type: object
      properties:
        title:
          type: string
          example: "Photo Editor Pro"
        description:
          type: string
          example: "An advanced photo editing software with new features."
        category:
          type: string
          example: "Software"
        price:
          type: number
          format: float
          example: 59.99
        imageUrl:
          type: string
          example: https://exampleurl.com/example-product.jpg
        tags:
          type: array
          items:
            type: string
        deleted:
          type: boolean
          example: false

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/Product'

    ProductListResponse:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174001
        name:
          type: string
          example: "Software"
      required:
        - id
        - name

    CategoryListResponse:
      type: object
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        pagination:
          $ref: '#/components/schemas/Pagination'

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 5
        totalItems:
          type: integer
          example: 50
        limit:
          type: integer
          example: 10

    DeleteProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product deleted successfully."

    CartProduct:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        productTitle:
          type: string
          example: "Photo Editor Pro"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 49.99
        totalPrice:
          type: number
          format: float
          example: 99.98
      required:
        - productId
        - productTitle
        - quantity
        - price
        - totalPrice

    CartResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 456e7890-e89b-12d3-a456-426614174002
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
        totalProducts:
          type: integer
          example: 3
        totalPrice:
          type: number
          format: float
          example: 149.97
      required:
        - userId
        - products
        - totalProducts
        - totalPrice

    StartCheckoutRequest:
      type: object
      properties:
        paymentMethod:
          type: string
        paymentToken:
          type: string
          format: uuid

    AddCartProductRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        quantity:
          type: integer
          minimum: 1
          example: 1

    UpdateCartProductRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          example: 2

    CartProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product added to cart successfully."
        product:
          $ref: '#/components/schemas/CartProduct'
      required:
        - message
        - product

    DeleteCartProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Cart product removed successfully."
      required:
        - message

    EmptyCartResponse:
      type: object
      properties:
        message:
          type: string
          example: "Shopping cart emptied successfully."
      required:
        - message

    CheckoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Checkout initiated successfully."
        orderId:
          type: string
          format: uuid
          example: 321e6547-e89b-12d3-a456-426614174003
      required:
        - message
        - orderId

    Order:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
          example: 789e4567-e89b-12d3-a456-426614174000
        userId:
          type: string
          format: uuid
          example: 456e7890-e89b-12d3-a456-426614174002
        status:
          type: string
          enum:
            - OPEN
            - PAYMENT_COMPLETED
            - PAYMENT_FAILED
            - LICENSES_GENERATED
            - COMPLETED
          example: "open"
        statusDetail:
          type: string
          example: "There was a problem with the payment, the chosen payment method is not available."
        paymentMethod:
          type: string
          example: "eh-ma-payment-method-paypal"
        paymentToken:
          type: string
          format: uuid
          example: 789e4567-e89b-12d3-a456-426614174000
        totalAmount:
          type: number
          format: float
          example: 149.97
        currency:
          type: string
          example: "EUR"
          enum:
            - "EUR"
        createdAt:
          type: string
          format: date-time
          example: '2023-10-15T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-10-16T12:00:00Z'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - orderId
        - userId
        - status
        - totalAmount
        - currency
        - createdAt
        - updatedAt
        - items

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        productTitle:
          type: string
          example: "Photo Editor Pro"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 49.99
        totalPrice:
          type: number
          format: float
          example: 99.98
      required:
        - productId
        - productTitle
        - quantity
        - price
        - totalPrice

    OrderListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 987e6543-e89b-12d3-a456-426614174004
        selector:
          type: string
          example: "eh-ma-payment-method-paypal"
        name:
          type: string
          example: "Credit Card"
        description:
          type: string
          example: "Pay using Visa, MasterCard, or American Express."
        active:
          type: boolean
          example: true
        iconUrl:
          type: string
          example: "https://yourshop.com/images/payment-icons/credit-card.png"
        paymentGatewayUrl:
          type: string
          example: "https://example.paymentprovider.com/payments"
        merchantId:
          type: string
          example: "eh-ma-payment-merchantId-paypal"

    PaymentMethodResponse:
      allOf:
        - $ref: '#/components/schemas/PaymentMethod'

    PaymentMethodListResponse:
      type: object
      properties:
        paymentMethods:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'

    CreatePaymentMethodRequest:
      type: object
      properties:
        name:
          type: string
          example: "PayPal"
        selector:
          type: string
          example: "eh-ma-payment-method-paypal"
        description:
          type: string
          example: "Pay securely using your PayPal account."
        active:
          type: boolean
          example: true
        iconUrl:
          type: string
          example: "https://yourshop.com/images/payment-icons/paypal.png"
        paymentGatewayUrl:
          type: string
          example: "https://example.paymentprovider.com/payments"
        merchantId:
          type: string
          example: "eh-ma-payment-merchantId-paypal"
        merchantSecret:
          type: string
          example: "eh-ma-payment-merchantSecret-paypal"



    UpdatePaymentMethodRequest:
      type: object
      properties:
        name:
          type: string
          example: "PayPal"
        selector:
          type: string
          example: "eh-ma-payment-method-paypal"
        description:
          type: string
          example: "Pay securely using your PayPal account."
        active:
          type: boolean
          example: true
        iconUrl:
          type: string
          example: "https://yourshop.com/images/payment-icons/paypal.png"
        paymentGatewayUrl:
          type: string
          example: "https://example.paymentprovider.com/payments"
        merchantId:
          type: string
          example: "eh-ma-payment-merchantId-paypal"
        merchantSecret:
          type: string
          example: "eh-ma-payment-merchantSecret-paypal"

    PaymentMethodDetailedResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: "987e6543-e89b-12d3-a456-426614174004"
        selector:
          type: string
          example: "eh-ma-payment-method-paypal"
        name:
          type: string
          example: "PayPal"
        description:
          type: string
          example: "Pay securely using your PayPal account."
        active:
          type: boolean
          example: true
        iconUrl:
          type: string
          example: "https://yourshop.com/images/payment-icons/paypal.png"
        paymentGatewayUrl:
          type: string
          example: "https://example.paymentprovider.com/payments"
        merchantId:
          type: string
          example: "eh-ma-payment-merchantId-paypal"
        merchantSecret:
          type: string
          example: "eh-ma-payment-merchantSecret-paypal"
        createdAt:
          type: string
          format: date-time
          example: "2024-11-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-11-10T18:00:00Z"

    DeletePaymentMethodResponse:
      type: object
      properties:
        message:
          type: string
          example: "Payment method deleted successfully."
      required:
        - message

    LicenseTemplate:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 321e4567-e89b-12d3-a456-426614174000
        licenseDuration:
          type: integer
          description: Duration of the license in days (0 for perpetual)
          example: 365
        createdAt:
          type: string
          format: date-time
          example: '2023-10-15T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-10-16T12:00:00Z'
      required:
        - productId
        - licenseDuration
        - createdAt
        - updatedAt

    LicenseTemplateResponse:
      allOf:
        - $ref: '#/components/schemas/LicenseTemplate'

    LicenseTemplateListResponse:
      type: object
      properties:
        licenseTemplates:
          type: array
          items:
            $ref: '#/components/schemas/LicenseTemplate'

    UpdateLicenseTemplateRequest:
      type: object
      required:
        - licenseDuration
      properties:
        licenseDuration:
          type: integer
          description: Duration of the license in days (0 for perpetual)
          example: 365

    License:
      type: object
      properties:
        serialNumber:
          type: string
          format: uuid
          example: 456e7890-e89b-12d3-a456-426614174003
        userId:
          type: string
          format: uuid
          example: 456e7890-e89b-12d3-a456-426614174002
        productId:
          type: string
          format: uuid
          example: 321e4567-e89b-12d3-a456-426614174000
        productTitle:
          type: string
        licenseDuration:
          type: integer
          description: Duration of the license in days (0 for perpetual)
          example: 365
        issuedAt:
          type: string
          format: date-time
          example: '2023-10-17T09:00:00Z'
        expiresAt:
          type: string
          format: date-time
          example: '2024-10-17T09:00:00Z'
      required:
        - serialNumber
        - userId
        - productId
        - licenseDuration
        - issuedAt
        - status

    CreateLicenseTemplateRequest:
      type: object
      required:
        - productId
        - licenseDuration
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product for which the license template is created
          example: 321e4567-e89b-12d3-a456-426614174000
        licenseDuration:
          type: integer
          description: Duration of the license in days (0 for perpetual)
          example: 365

    LicenseResponse:
      allOf:
        - $ref: '#/components/schemas/License'

    LicenseListResponse:
      type: object
      properties:
        licenses:
          type: array
          items:
            $ref: '#/components/schemas/License'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    DeleteLicenseTemplateResponse:
      type: object
      properties:
        message:
          type: string

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 789e1234-e89b-12d3-a456-426614174001
        userId:
          type: string
          format: uuid
          description: User ID if the notification is associated with a user
          example: 456e7890-e89b-12d3-a456-426614174002
        email:
          type: string
          format: email
          description: Recipient email address
          example: user@example.com
        type:
          type: string
          description: Type of the notification
          example: 'orderConfirmation'
        subject:
          type: string
          description: Email subject
          example: 'Your Order Confirmation'
        body:
          type: string
          description: Email body content
          example: 'Thank you for your purchase...'
        sentAt:
          type: string
          format: date-time
          description: Timestamp when the notification was sent
          example: '2023-10-17T09:00:00Z'


    NotificationResponse:
      allOf:
        - $ref: '#/components/schemas/Notification'

    NotificationListResponse:
      type: object
      properties:
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    Event:
      type: object
      properties:
        eventId:
          type: string
          format: uuid
          example: 789e1234-e89b-12d3-a456-426614174001
        eventType:
          type: string
          description: Type of the event
          example: 'OrderCreated'
        body:
          type: string
          description: Event payload (usually a JSON string)
          example: '{"orderId": "789e4567-e89b-12d3-a456-426614174000", "userId": "456e7890-e89b-12d3-a456-426614174002"}'
        metadata:
          type: object
          description: Additional metadata about the event
          properties:
            userId:
              type: string
              format: uuid
              example: '456e7890-e89b-12d3-a456-426614174002'
            productId:
              type: string
              format: uuid
              example: '321e4567-e89b-12d3-a456-426614174000'
            orderId:
              type: string
              format: uuid
              example: '789e4567-e89b-12d3-a456-426614174000'
            userMail:
              type: string
            sessionId:
              type: string
              format: uuid
            sourceService:
              type: string
              description: Name of the service that generated the event
              example: 'OrderService'
            requestCorrelationId:
              type: string
              format: uuid
              example: '789e4567-e89b-12d3-a456-426614174000'
            timestamp:
              type: string
              format: date-time
              description: Timestamp when the event occurred
              example: '2023-10-17T09:00:00Z'


    EventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    SuccessResponse:
      type: object
      properties:
        message:
          type: string

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        details:
          type: string


tags:
  - name: Health
    description: Healthcheck
  - name: Authentication
    description: Register and login user.
  - name: User
    description: Endpoints related to managing user data and personal information.
  - name: Product Management
    description: Endpoints related to managing digital products.
  - name: Shopping Cart
    description: Endpoints related to managing the shopping cart.
  - name: Orders
    description: Endpoints related to viewing orders and order details.
  - name: Payment Methods
    description: Endpoints related to managing payment methods.
  - name: License Templates
    description: Endpoints related to managing license templates.
  - name: Licenses
    description: Endpoints related to viewing generated licenses.
  - name: Notifications
    description: Endpoints related to viewing and managing notifications.
  - name: Events
    description: Endpoints related to viewing and managing tracked events.
