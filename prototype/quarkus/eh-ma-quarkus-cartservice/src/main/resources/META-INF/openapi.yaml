openapi: 3.0.3
info:
  title: ShoppingCartService API
  version: 1.0.0
  description: |
    API specification for the ShoppingCartService of the e-shop application.
    Manages shopping carts, including adding, viewing, updating, and deleting items.
    Allows users to initiate the checkout process.

servers:
  - url: localhost:8084
    description: local dev

paths:
  /health:
    get:
      summary: Health check
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Authservice health response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /cart-products:
    get:
      summary: Get all products in the user's shopping cart
      operationId: getCartProducts
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Add an product to the shopping cart
      operationId: addProductToCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Product ID and quantity to add to the cart
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartProductRequest'
      responses:
        '201':
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Empty the shopping cart
      operationId: emptyCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Shopping cart emptied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyCartResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart-products/{productId}:
    put:
      summary: Update the quantity of an product in the cart
      operationId: updateCartProduct
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParam'
      requestBody:
        description: New quantity for the cart product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartProductRequest'
      responses:
        '200':
          description: Cart product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartProductResponse'
        '400':
          description: Bad Request - Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist in the cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Remove a product from the shopping cart
      operationId: deleteCartProduct
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ProductIdPathParam'
      responses:
        '200':
          description: Cart product removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCartProductResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Product does not exist in the cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart-products/checkout:
    post:
      summary: Initiate the checkout process for the shopping cart
      operationId: checkoutCart
      tags:
        - Shopping Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Start checkout process
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartCheckoutRequest'
      responses:
        '200':
          description: Checkout initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '400':
          description: Bad Request - Cart is empty or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ProductIdPathParam:
      name: productId
      in: path
      description: ID of the cart product
      required: true
      schema:
        type: string
        format: uuid
        example: 789e1234-e89b-12d3-a456-426614174001

  schemas:
    CartProduct:
      type: object
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        productTitle:
          type: string
          example: "Photo Editor Pro"
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: float
          example: 49.99
        totalPrice:
          type: number
          format: float
          example: 99.98
      required:
        - productId
        - productTitle
        - quantity
        - price
        - totalPrice

    CartResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          example: 456e7890-e89b-12d3-a456-426614174002
        products:
          type: array
          items:
            $ref: '#/components/schemas/CartProduct'
        totalProducts:
          type: integer
          example: 3
        totalPrice:
          type: number
          format: float
          example: 149.97
      required:
        - userId
        - products
        - totalProducts
        - totalPrice

    StartCheckoutRequest:
      type: object
      properties:
        paymentMethod:
          type: string
        paymentToken:
          type: string
          format: uuid

    AddCartProductRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        quantity:
          type: integer
          minimum: 1
          example: 1

    UpdateCartProductRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minimum: 1
          example: 2

    CartProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Product added to cart successfully."
        product:
          $ref: '#/components/schemas/CartProduct'
      required:
        - message
        - product

    DeleteCartProductResponse:
      type: object
      properties:
        message:
          type: string
          example: "Cart product removed successfully."
      required:
        - message

    EmptyCartResponse:
      type: object
      properties:
        message:
          type: string
          example: "Shopping cart emptied successfully."
      required:
        - message

    CheckoutResponse:
      type: object
      properties:
        message:
          type: string
          example: "Checkout initiated successfully."
        orderId:
          type: string
          format: uuid
          example: 321e6547-e89b-12d3-a456-426614174003
      required:
        - message
        - orderId

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        details:
          type: string

    SuccessResponse:
      type: object
      properties:
        message:
          type: string

tags:
  - name: Shopping Cart
    description: Endpoints related to managing the shopping cart.
