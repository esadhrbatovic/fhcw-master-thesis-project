openapi: 3.0.3
info:
  title: TrackingService API
  version: 1.1.0
  description: |
    API specification for the TrackingService of the e-shop application.
    Collects and records events for analytics and monitoring.
    Provides admin endpoints to list and filter recorded events.

servers:
  - url: https://trackingservice.yourshop.com
    description: Production server
  - url: https://trackingservice.staging.yourshop.com
    description: Staging server

paths:
  /events:
    get:
      summary: List recorded events (admin only)
      operationId: listEvents
      tags:
        - Events
      security:
        - bearerAuth: []
        - adminAuth: []
      parameters:
        - $ref: '#/components/parameters/PageQueryParam'
        - $ref: '#/components/parameters/LimitQueryParam'
        - $ref: '#/components/parameters/EventTypeQueryParam'
        - $ref: '#/components/parameters/SourceServiceQueryParam'
        - $ref: '#/components/parameters/UserIdQueryParam'
        - $ref: '#/components/parameters/UserEmailQueryParam'
        - $ref: '#/components/parameters/SessionIdQueryParam'
        - $ref: '#/components/parameters/ProductIdQueryParam'
        - $ref: '#/components/parameters/OrderIdQueryParam'
        - $ref: '#/components/parameters/OccurredAfterQueryParam'
        - $ref: '#/components/parameters/OccurredBeforeQueryParam'
        - $ref: '#/components/parameters/SortQueryParam'
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /events/{eventId}:
    get:
      summary: Get details of a specific event (admin only)
      operationId: getEventById
      tags:
        - Events
      security:
        - bearerAuth: []
        - adminAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIdPathParam'
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Not allowed to access this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not Found - Event does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    adminAuth:
      type: apiKey
      in: header
      name: X-Admin-Token
      description: Token for admin access

  parameters:
    EventIdPathParam:
      name: eventId
      in: path
      description: UUID of the event
      required: true
      schema:
        type: string
        format: uuid
        example: 789e1234-e89b-12d3-a456-426614174001


    PageQueryParam:
      name: page
      in: query
      description: Page number for pagination (default is 1)
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    LimitQueryParam:
      name: limit
      in: query
      description: Number of items per page (default is 10)
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

    EventTypeQueryParam:
      name: eventType
      in: query
      description: Filter events by event type
      required: false
      schema:
        type: string
        example: 'OrderCreated'

    SourceServiceQueryParam:
      name: sourceService
      in: query
      description: Filter events by source service name
      required: false
      schema:
        type: string
        example: 'OrderService'

    UserIdQueryParam:
      name: userId
      in: query
      description: Filter events by user ID
      required: false
      schema:
        type: string
        format: uuid
        example: 456e7890-e89b-12d3-a456-426614174002

    ProductIdQueryParam:
      name: productId
      in: query
      description: Filter events by product ID
      required: false
      schema:
        type: string
        format: uuid
        example: 321e4567-e89b-12d3-a456-426614174000

    OrderIdQueryParam:
      name: orderId
      in: query
      description: Filter events by order ID
      required: false
      schema:
        type: string
        format: uuid
        example: 789e4567-e89b-12d3-a456-426614174000

    SessionIdQueryParam:
      name: sessionId
      in: query
      description: Filter events by session ID
      required: false
      schema:
        type: string
        format: uuid
        example: 789e4567-e89b-12d3-a456-426614174000

    UserEmailQueryParam:
      name: userEmail
      in: query
      description: Filter events by user email
      required: false
      schema:
        type: string

    OccurredAfterQueryParam:
      name: occurredAfter
      in: query
      description: Filter events that occurred after a specific date and time
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-10-01T00:00:00Z'

    OccurredBeforeQueryParam:
      name: occurredBefore
      in: query
      description: Filter events that occurred before a specific date and time
      required: false
      schema:
        type: string
        format: date-time
        example: '2023-10-31T23:59:59Z'

    SortQueryParam:
      name: sort
      in: query
      description: Sort order (e.g., 'dateAsc', 'dateDesc')
      required: false
      schema:
        type: string
        enum:
          - dateAsc
          - dateDesc
        example: 'dateDesc'

  schemas:
    Event:
      type: object
      properties:
        eventId:
          type: string
          format: uuid
          example: 789e1234-e89b-12d3-a456-426614174001
        eventType:
          type: string
          description: Type of the event
          example: 'OrderCreated'
        body:
          type: string
          description: Event payload (usually a JSON string)
          example: '{"orderId": "789e4567-e89b-12d3-a456-426614174000", "userId": "456e7890-e89b-12d3-a456-426614174002"}'
        metadata:
          type: object
          description: Additional metadata about the event
          properties:
            userId:
              type: string
              format: uuid
              example: '456e7890-e89b-12d3-a456-426614174002'
            productId:
              type: string
              format: uuid
              example: '321e4567-e89b-12d3-a456-426614174000'
            orderId:
              type: string
              format: uuid
              example: '789e4567-e89b-12d3-a456-426614174000'
            userMail:
              type: string
            sessionId:
              type: string
              format: uuid
            sourceService:
              type: string
              description: Name of the service that generated the event
              example: 'OrderService'
            timestamp:
              type: string
              format: date-time
              description: Timestamp when the event occurred
              example: '2023-10-17T09:00:00Z'


    EventListResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            limit:
              type: integer
              example: 10

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: 'Unauthorized access.'
        details:
          type: string
          example: 'You are not authorized to access this resource.'

security:
  - bearerAuth: []

tags:
  - name: Events
    description: Endpoints related to viewing and managing tracked events.
